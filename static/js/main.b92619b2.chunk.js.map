{"version":3,"sources":["MovieCard.js","SearchMovies.js","App.js","reportWebVitals.js","index.js"],"names":["MovieCard","movie","className","src","poster_path","alt","title","release_date","vote_average","overview","id","SearchMovies","useState","query","setQuery","movies","setMovies","searchMovies","e","a","preventDefault","url","fetch","res","json","data","results","console","error","onSubmit","htmlFor","type","name","placeholder","value","onChange","target","filter","map","App","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0RAEe,SAASA,EAAT,GAA+B,IAAVC,EAAS,EAATA,MAClC,OACE,sBAAKC,UAAU,OAAf,UACE,qBACEA,UAAU,cACVC,IAAG,0DAAqDF,EAAMG,aAC9DC,IAAKJ,EAAMK,MAAQ,YAErB,sBAAKJ,UAAU,gBAAf,UACE,oBAAIA,UAAU,cAAd,SAA6BD,EAAMK,QACnC,4BACE,mDAAsBL,EAAMM,kBAE9B,4BACE,6CAAgBN,EAAMO,kBAExB,mBAAGN,UAAU,aAAb,SAA2BD,EAAMQ,gBAdVR,EAAMS,ICDrC,IA6CeC,EA7CM,WAAM,MAECC,mBAAS,IAFV,mBAElBC,EAFkB,KAEXC,EAFW,OAGGF,mBAAS,IAHZ,mBAGlBG,EAHkB,KAGVC,EAHU,KAInBC,EAAY,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DACnBD,EAAEE,iBAEIC,EAHa,kHAGoGR,EAHpG,iDAKCS,MAAMD,GALP,cAKXE,EALW,gBAMEA,EAAIC,OANN,OAMXC,EANW,OAOjBT,EAAUS,EAAKC,SAPE,kDASjBC,QAAQC,MAAR,MATiB,0DAAH,sDAYlB,OACE,gCACE,uBAAM1B,UAAU,OAAO2B,SAAUZ,EAAjC,UACE,uBAAOa,QAAQ,QAAQ5B,UAAU,QAAjC,wBAGA,uBACEA,UAAU,QACV6B,KAAK,OACLC,KAAK,QACLC,YAAY,qBACZC,MAAOrB,EACPsB,SAAU,SAACjB,GAAD,OAAOJ,EAASI,EAAEkB,OAAOF,UAErC,wBAAQhC,UAAU,SAAS6B,KAAK,SAAhC,uBAIF,qBAAK7B,UAAU,YAAf,SACGa,EACEsB,QAAO,SAACpC,GAAD,OAAWA,EAAMG,eACxBkC,KAAI,SAACrC,GAAD,OACH,cAACD,EAAD,CAAWC,MAAOA,GAAYA,EAAMS,aC1BjC6B,E,4JAVb,WACE,OACE,sBAAKrC,UAAU,YAAf,UACE,oBAAIA,UAAU,QAAd,8BACA,cAAC,EAAD,W,GALUsC,IAAMC,WCQTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b92619b2.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function MovieCard({ movie }) {\n  return (\n    <div className=\"card\" key={movie.id}>\n      <img\n        className=\"card--image\"\n        src={`https://image.tmdb.org/t/p/w185_and_h278_bestv2/${movie.poster_path}`}\n        alt={movie.title + \" poster\"}\n      />\n      <div className=\"card--content\">\n        <h3 className=\"card--title\">{movie.title}</h3>\n        <p>\n          <small>RELEASE DATE: {movie.release_date}</small>\n        </p>\n        <p>\n          <small>RATING: {movie.vote_average}</small>\n        </p>\n        <p className=\"card--desc\">{movie.overview}</p>\n      </div>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport MovieCard from \"./MovieCard\";\n\nconst SearchMovies = () => {\n  //states- input query, movies\n  const [query, setQuery] = useState(\"\");\n  const [movies, setMovies] = useState([]);\n  const searchMovies = async (e) => {\n    e.preventDefault();\n\n    const url = `https://api.themoviedb.org/3/search/movie?api_key=6a979c4fff5df7488a1565dfc0c4a8ea&language=en-US&query=${query}&page=1&include_adult=false`;\n    try {\n      const res = await fetch(url);\n      const data = await res.json();\n      setMovies(data.results);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n  return (\n    <div>\n      <form className=\"form\" onSubmit={searchMovies}>\n        <label htmlFor=\"query\" className=\"label\">\n          Movie Name\n        </label>\n        <input\n          className=\"input\"\n          type=\"text\"\n          name=\"query\"\n          placeholder=\"i.e. Jurassic Park\"\n          value={query}\n          onChange={(e) => setQuery(e.target.value)}\n        ></input>\n        <button className=\"button\" type=\"submit\">\n          Search\n        </button>\n      </form>\n      <div className=\"card-list\">\n        {movies\n          .filter((movie) => movie.poster_path)\n          .map((movie) => (\n            <MovieCard movie={movie} key={movie.id} />\n          ))}\n      </div>\n    </div>\n  );\n};\n\nexport default SearchMovies;\n","import \"./App.css\";\nimport React from \"react\";\nimport SearchMovies from \"./SearchMovies.js\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <h1 className=\"title\">The Movie Search</h1>\n        <SearchMovies />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}